// import { Button, Paper, TextField } from '@mui/material'
// import { ErrorMessage, Field, Form, Formik } from 'formik'
// import React, { useEffect, useState } from 'react'
// import * as yup from 'yup'
// import { GetData, RegServices, UpdateData, ViewData } from '../Servicer/User'
// import { ToastContainer, toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';

// const Reg = () => {
//   const [user, setUser] = useState();
//   const [userData,setUserData] = useState()
//   const [edit, setEdit] = useState(false);
//   const [UserId, setUserId] = useState(null);
//   const validationSchema = yup.object({
//     name: yup.string().required('Name is required'),
//     email: yup.string().email('invalid  email address').required('emial is required'),
//     Pno: yup.string().required('Pno is required '),
//     password: yup.string().required('password is required').min(6, 'password must be in 6 character')
//   })
//   // const handleClikeEvent = async (values) => {
//   //   const res = await RegServices({
//   //     name: values.name,
//   //     email: values.email,
//   //     Phone: values.Pno,
//   //     password: values.password
//   //   })

//   //   console.log("res--", res.data)
//   //   if (res.data.status === 200) {
//   //     toast(res.data.message)
//   //     displayData()
//   //   }
//   // }
//   // const handleClikeEvent = async (values) => {
//   //   const formData = new FormData();
//   //   formData.append('name', values.name);
//   //   formData.append('email', values.email);
//   //   formData.append('Phone', values.Pno);
//   //   formData.append('password', values.password);

//   //   const response = edit ? await UpdateData(formData, UserId) : await RegServices(formData);
//   //   console.log('res==',response);
//   //   if (response.status === 200) {
//   //     toast(response.data.message);
//   //     displayData();
//   //   }
//   // }
//   const handleClikeEvent = async (values) => {
//     const formData = new FormData();
//     formData.append('name', values.name);
//     formData.append('email', values.email);
//     formData.append('Phone', values.Pno);
//     formData.append('password', values.password);

//     let response;
//     if (edit) {
//       response = await UpdateData(formData, UserId);
//     } else {
//       response = await RegServices(formData);
//     }

//     console.log('res==', response);
//     if (response.status === 200) {
//       toast.success(response.data.message); // Assuming you use react-toastify for notifications
//       displayData();
//     } else {
//       toast.error('Failed to update data'); // Handle error case if needed
//     }
//   }

//   useEffect(() => {
//     displayData()
//   }, [])
//   const displayData = async () => {
//     const res = await GetData()
//     setUser(res.data)
//     console.log("resresresres--", res.data);
//   }

//   const updateForm=async(id)=>{
//     console.log('updateForm=',id);
//     await fetchData(id)
//     setEdit(true)
//     setUserId(id)
//   }

//   const fetchData = async(id)=>{
//     console.log('fetchData=',id);
//     const res = await ViewData(id)
//     console.log("res fetchdata--",res.data.data);
//     setUserData(res.data)
//   }

//   return (
//     <>
//       <div className='p-4'>
//         <Formik validationSchema={validationSchema} initialValues={{
//           name:edit?userData?.name: '',
//           Pno:edit?userData?.Phone: '',
//           email:edit?userData?.email: '',
//           password:edit?userData?.password: '',
//         }}
//           onSubmit={handleClikeEvent}>
//           <div className='row justify-content-center'>
//             <div className='col-xl-4  col-lg-6 col-md-7 col-sm-10'>
//               <Paper>
//                 <Form>
//                   <div style={{ display: 'flex', flexDirection: 'column' }} className='p-4'>
//                     <Field as={TextField} name="name" label="enter your name"></Field>
//                     <div style={{ color: 'red' }}>
//                       <ErrorMessage name='name' />
//                     </div>
//                     <Field as={TextField} name="email" label="enter your email"></Field>
//                     <div style={{ color: 'red' }}>
//                       <ErrorMessage name='email' />
//                     </div>
//                     <Field as={TextField} name="Pno" label="enter your phone number"></Field>
//                     <ErrorMessage name='Pno' />
//                     <Field as={TextField} name="password" label="enter your password"></Field>
//                     <ErrorMessage name='password' />
//                     <Button type='submit' variant='contained'>Submit</Button>
//                     <ToastContainer />
//                   </div>
//                 </Form>
//               </Paper>
//             </div>
//           </div>
//         </Formik>
//       </div>
//       {/* ------------------------------------------ */}
//       {console.log()}
//       <div className='container'>
//         <table className='table table-bordered'>
//           <tr>
//             <th>user id</th>
//             <th>name</th>
//             <th>email</th>
//             <th>Phone</th>
//           </tr>
//           {user?.data?.map((user, i) => (
//             <tr>
//               <td>{i + 1}</td>
//               <td>{user.name}</td>
//               <td>{user.email}</td>
//               <td>{user.Phone}</td>
//               <td>
//                 <button onClick={()=>updateForm(user._id)}>Update</button>

//               </td>
//               <td>
//                 <button>Delete</button>
//               </td>
//             </tr>

//           ))}
//         </table>
//       </div>
//     </>
//   )
// }
// export default Reg


import { Button, Paper, TextField } from '@mui/material';
import { ErrorMessage, Field, Form, Formik } from 'formik';
import React, { useEffect, useState } from 'react';
import * as yup from 'yup';
import { GetData, RegServices, UpdateData, ViewData } from '../Servicer/User';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
const Reg = () => {
  const [user, setUser] = useState();
  const [userData, setUserData] = useState(null);
  const [edit, setEdit] = useState(false);
  const [UserId, setUserId] = useState(null);

  const validationSchema = yup.object({
    name: yup.string().required('Name is required'),
    email: yup.string().email('Invalid email address').required('Email is required'),
    Pno: yup.string().required('Phone number is required'),
    password: yup.string().required('Password is required').min(6, 'Password must be at least 6 characters'),
  });
  useEffect(() => {
    displayData();
  }, []);
  const displayData = async () => {
    const res = await GetData();
    setUser(res.data);
    console.log("resresresres--", res.data);
  };
  const updateForm = async (id) => {
    console.log('updateForm=', id);
    await fetchData(id);
    setEdit(true);
    setUserId(id);
  };
  const fetchData = async (id) => {
    console.log('fetchData=', id);
    const res = await ViewData(id);
    console.log("res fetchdata--", res.data.data);
    setUserData(res.data.data); 
  };
  const handleClikeEvent = async (values) => {
    const formData = new FormData();
    formData.append('name', values.name);
    formData.append('email', values.email);
    formData.append('Phone', values.Pno);
    formData.append('password', values.password);

    let response;
    if (edit) {
      console.log('formdata---', formData);
      response = await UpdateData(formData, UserId);
    } else {
      response = await RegServices(formData);
    }

    console.log('res==', response);
    console.log('res==', response.data.status);

    if (response.data.status === 200) {
      toast.success(response.data.message); 
      displayData();
      setEdit(false); 
      setUserId(null);
      setUserData(null);
    } else {
      toast.error('Failed to update data'); 
    }
  };
  return (
    <>
      <div className='p-4'>
        <Formik
          validationSchema={validationSchema}
          initialValues={{
            name: edit ? userData?.name : '',
            Pno: edit ? userData?.Phone : '',
            email: edit ? userData?.email : '',
            password: edit ? userData?.password : '',
          }}
          onSubmit={handleClikeEvent}
        >
          <div className='row justify-content-center'>
            <div className='col-xl-4 col-lg-6 col-md-7 col-sm-10'>
              <Paper>
                <Form>
                  <div style={{ display: 'flex', flexDirection: 'column' }} className='p-4'>
                    <Field as={TextField} name="name" label="Enter your name" />
                    <div style={{ color: 'red' }}>
                      <ErrorMessage name='name' />
                    </div>
                    <Field as={TextField} name="email" label="Enter your email" />
                    <div style={{ color: 'red' }}>
                      <ErrorMessage name='email' />
                    </div>
                    <Field as={TextField} name="Pno" label="Enter your phone number" />
                    <ErrorMessage name='Pno' />
                    <Field as={TextField} name="password" label="Enter your password" />
                    <ErrorMessage name='password' />
                    <Button type='submit' variant='contained'>Submit</Button>
                    <ToastContainer />
                  </div>
                </Form>
              </Paper>
            </div>
          </div>
        </Formik>
      </div>
      {/* ------------------------------------------ */}
      <div className='container'>
        <table className='table table-bordered'>
          <thead>
            <tr>
              <th>User ID</th>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {user?.data?.map((user, i) => (
              <tr key={user._id}>
                <td>{i + 1}</td>
                <td>{user.name}</td>
                <td>{user.email}</td>
                <td>{user.Phone}</td>
                <td>
                  <button onClick={() => updateForm(user._id)}>Update</button>
                  <button>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default Reg;
